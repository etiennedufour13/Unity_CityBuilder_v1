using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

[RequireComponent(typeof(LineRenderer))]
public class RoadBuilder : MonoBehaviour
{
    public Camera cam;
    public LayerMask groundLayer;
    public Material roadMaterial;

    private List<Vector3> points = new List<Vector3>();
    private LineRenderer lineRenderer;
    private LineRenderer pointRenderer;
    private bool isBuilding = false;
    private float closeDistanceThreshold = 0.2f; // Distance pour fermer la route

    //Dot de visualisation
    public GameObject visualPointPrefab;
    private GameObject visualPoint;

    //syst me de v rification du temps de clic droit
    private float currentClickTime;
    private bool clicDroit;
    public float maxClickTime;

    void Start()
    {
        //setup du syst me de line
        lineRenderer = GetComponent<LineRenderer>();
        lineRenderer.positionCount = 0;
        lineRenderer.startWidth = 0.08f; //visuel
        lineRenderer.endWidth = 0.08f; //visuel
    }

    void Update()
    {
        if (!isBuilding) return;

        UpdateCurrentPointMarker();
        CheckInput();


        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, groundLayer))
        {
            visualPoint.SetActive(true);
            visualPoint.transform.position = new Vector3 (hit.point.x, hit.point.y + 0.0002f, hit.point.z);
        }
        else
        {
            visualPoint.SetActive(false);
        }
    }

    void CheckInput()
    {
        if (Input.GetMouseButtonDown(0))
        {
            AddPoint();
        }

        //clic droit (doit  tre rapide pour ne pas  tre confondu avec un d placement)
        if (Input.GetMouseButtonDown(1))
        {
            Debug.Log("entr ");
            clicDroit = true;
            currentClickTime = 0;
        }
        if (clicDroit)
        {
            currentClickTime += Time.deltaTime;
            if (currentClickTime > maxClickTime)
                clicDroit = false;
        }
        if(Input.GetMouseButtonUp(1) && clicDroit)
        {
            StartAndStopBuilding(false);
        }
    }

    public void StartAndStopBuilding(bool isStarting)
    {
        if (isStarting)
        {
            isBuilding = true;
            points.Clear();
            lineRenderer.positionCount = 0;
            visualPoint = Instantiate(visualPointPrefab, transform.position, Quaternion.identity);
        }
        else
        {
            points.Clear();
            lineRenderer.positionCount = 0;
            Destroy(visualPoint);
            isBuilding = false;
        }
    }

    private void AddPoint()
    {
        Ray ray = cam.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, groundLayer))
        {
            Vector3 newPoint = hit.point + Vector3.up * 0.01f; // L g rement sur lev 

            // V rifie si le premier et dernier point sont proches pour fermer la route
            if (points.Count > 2 && Vector3.Distance(newPoint, points[0]) < closeDistanceThreshold)
            {
                CloseRoad();
                return;
            }

            points.Add(newPoint);
            lineRenderer.positionCount = points.Count;
            lineRenderer.SetPositions(points.ToArray());
        }
    }

    private void UpdateCurrentPointMarker()
    {
        Ray ray = cam.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, groundLayer))
        {
            Vector3 hoverPoint = hit.point + Vector3.up * 0.01f; // L g rement sur lev 

            if (points.Count > 0)
            {
                lineRenderer.positionCount = points.Count + 1;
                Vector3[] allPoints = new Vector3[points.Count + 1];
                points.CopyTo(allPoints);
                allPoints[points.Count] = hoverPoint;
                lineRenderer.SetPositions(allPoints);
            }
        }
    }

    private void CloseRoad()
    {
        isBuilding = false;
        CreateRoadMesh();
    }

    private void CreateRoadMesh()
    {
        GameObject road = new GameObject("Road");
        road.tag = "Path";
        road.transform.position = Vector3.zero;
        MeshFilter meshFilter = road.AddComponent<MeshFilter>();
        MeshRenderer meshRenderer = road.AddComponent<MeshRenderer>();
        MeshCollider meshCollider = road.AddComponent<MeshCollider>();
        meshRenderer.material = roadMaterial;

        Mesh mesh = new Mesh();
        mesh.vertices = points.ToArray();

        // Triangulation automatique (simplifi  pour l'exemple)
        List<int> triangles = new List<int>();
        for (int i = 1; i < points.Count - 1; i++)
        {
            triangles.Add(0);
            triangles.Add(i);
            triangles.Add(i + 1);
        }

        mesh.triangles = triangles.ToArray();
        mesh.RecalculateNormals();

        meshFilter.mesh = mesh;
        meshCollider.sharedMesh = mesh; // Assigne correctement le Mesh au Collider

        //ajout du MaterialController
        road.AddComponent<MaterialController>();

        //efface le line renderer
        StartAndStopBuilding(false);
    }
}