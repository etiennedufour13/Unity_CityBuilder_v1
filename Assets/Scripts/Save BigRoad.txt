using System.Collections.Generic;
using UnityEngine;

public class BigRoadBuilder : MonoBehaviour
{
    public Material roadMaterial;
    public float roadWidth = 1f;
    private List<Vector3> controlPoints = new List<Vector3>();
    private Mesh roadMesh;
    private MeshFilter meshFilter;
    private MeshRenderer meshRenderer;
    private bool isPlacing = false;

    void Start()
    {
        GameObject roadObject = new GameObject("Road");
        meshFilter = roadObject.AddComponent<MeshFilter>();
        meshRenderer = roadObject.AddComponent<MeshRenderer>();
        roadMesh = new Mesh();
        meshFilter.mesh = roadMesh;
        meshRenderer.material = roadMaterial;
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            Vector3? point = GetMousePositionOnGround();
            if (point.HasValue)
            {
                controlPoints.Add(point.Value);
                GenerateRoadMesh();
            }
        }
        if (Input.GetMouseButtonDown(1))
        {
            isPlacing = false;
        }
    }

    Vector3? GetMousePositionOnGround()
    {
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit))
        {
            return hit.point;
        }
        return null;
    }

    void GenerateRoadMesh()
    {
        if (controlPoints.Count < 2) return;

        List<Vector3> smoothedPoints = GenerateSmoothCurve(controlPoints, 10);
        List<Vector3> vertices = new List<Vector3>();
        List<int> triangles = new List<int>();
        List<Vector2> uvs = new List<Vector2>();

        for (int i = 0; i < smoothedPoints.Count; i++)
        {
            Vector3 forward = Vector3.zero;
            if (i < smoothedPoints.Count - 1)
            {
                forward += smoothedPoints[i + 1] - smoothedPoints[i];
            }
            if (i > 0)
            {
                forward += smoothedPoints[i] - smoothedPoints[i - 1];
            }
            forward.Normalize();
            Vector3 left = Vector3.Cross(forward, Vector3.up).normalized;

            vertices.Add(smoothedPoints[i] + left * roadWidth * 0.5f);
            vertices.Add(smoothedPoints[i] - left * roadWidth * 0.5f);

            uvs.Add(new Vector2(0, i / (float)smoothedPoints.Count));
            uvs.Add(new Vector2(1, i / (float)smoothedPoints.Count));

            if (i < smoothedPoints.Count - 1)
            {
                int index = i * 2;
                triangles.Add(index);
                triangles.Add(index + 2);
                triangles.Add(index + 1);
                
                triangles.Add(index + 1);
                triangles.Add(index + 2);
                triangles.Add(index + 3);
            }
        }
        
        roadMesh.Clear();
        roadMesh.vertices = vertices.ToArray();
        roadMesh.triangles = triangles.ToArray();
        roadMesh.uv = uvs.ToArray();
        roadMesh.RecalculateNormals();
        
    }

    List<Vector3> GenerateSmoothCurve(List<Vector3> points, int interpolationSteps)
    {
        List<Vector3> smoothPoints = new List<Vector3>();
        for (int i = 0; i < points.Count - 1; i++)
        {
            Vector3 p0 = i > 0 ? points[i - 1] : points[i];
            Vector3 p1 = points[i];
            Vector3 p2 = points[i + 1];
            Vector3 p3 = i < points.Count - 2 ? points[i + 2] : points[i + 1];

            for (int j = 0; j < interpolationSteps; j++)
            {
                float t = j / (float)interpolationSteps;
                smoothPoints.Add(CatmullRomInterpolation(p0, p1, p2, p3, t));
            }
        }
        smoothPoints.Add(points[points.Count - 1]);
        return smoothPoints;
    }

    Vector3 CatmullRomInterpolation(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
    {
        float t2 = t * t;
        float t3 = t2 * t;
        return 0.5f * ((2 * p1) +
                       (-p0 + p2) * t +
                       (2 * p0 - 5 * p1 + 4 * p2 - p3) * t2 +
                       (-p0 + 3 * p1 - 3 * p2 + p3) * t3);
    }
}
